// debug de sharp
const sharp = require('sharp');
console.log('üîß Route GET /debug/sharp initialis√©e');
app.get('/debug/sharp', async (req, res) => {
  console.log('üîî  /debug/sharp appel√©e');
  try {
    const buffer = await sharp({
      create: { width: 50, height: 50, channels: 3, background: 'blue' }
    }).png().toBuffer();
    console.log('‚úÖ Buffer g√©n√©r√©, longueur =', buffer.length);

    // √âcrit directement l‚Äôimage sur disque pour tester
    const outDir  = path.resolve(__dirname, 'images');
    const outFile = path.join(outDir, `debug-${Date.now()}.png`);
    const fs      = require('fs');
    fs.writeFileSync(outFile, buffer);
    console.log('‚úÖ Image debug √©crite dans', outFile);

    return res.json({ ok: true, file: outFile });
  } catch (err) {
    console.error('‚ùå Erreur dans /debug/sharp :', err.stack || err);
    return res.status(500).send(err.stack || err.message);
  }
});

// fake-sharp.js
const fs   = require('fs');
const path = require('path');
const IMAGE_DIR = path.resolve(__dirname, '..', 'images');

module.exports = (req, res, next) => {
  if (!req.file) return next();
  const filename = `fake-${Date.now()}.bin`;
  const out = path.join(IMAGE_DIR, filename);
  fs.writeFile(out, req.file.buffer, err => {
    if (err) {
      console.error('‚ùå writeFile error:', err);
      return next(err);
    }
    console.log('‚úÖ writeFile OK, cr√©√© =', filename);
    req.file.filename = filename;
    req.file.path = out;
    next();
  });
};